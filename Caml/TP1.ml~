(*La hauteur h d'un B-arbre de paramètre t est telle que
log(t) < h < log(t)+1 *)


let param =3;;
type ('k,'v) btree = 
{
  mutable keys: 'k vect;
  mutable size: int;
  mutable vals: ('k, 'v) intext;
}
and ('k, 'v) intext =
  |Values of 'v vect
  |Sons of ('k, 'v) btree vect;;

let empty() = {
    size=0;
    keys=[| |];
    vals=Values [| |]
};;


let insert_vect n v k x = 
  for i=0 to n- k+1 do
    v.(n+1-i) <- v.(n-i);
  done;
  v.(k) <- x;;

let is_full b = b.size=2*param;;

let lookup t n k =
  let r= ref 0 in
  for i = 0 to n-1 do
    if t.(i)<k then incr r;
  done;
  !r;;

let v = [|1;2;3;3;3;4;5;67|];;

let rec find b k= 
  let i = lookup b.keys b.size k in
  match b.vals with
  |Values(v) -> if i=vect_length v then failwith"404 Not Found" 
                else v.(i)
  |Sons(s) -> find s.(i) k;;
(*find a un complexité en O(h) où h est la hauteur du B-arbre qu'on fouille*)



